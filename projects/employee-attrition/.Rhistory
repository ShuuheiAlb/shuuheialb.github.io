library(viridis)
# Base model
rsf_model <- function (df) {
model <- rfsrc(Surv(YearsAtCompany, Attrition) ~ ., data = df, ntree = 100)
return(model)
}
# Accuracy plot
plot_pec <- function(df, model) {
pred_error <- pec(model, data = df, formula = Surv(YearsAtCompany, Attrition) ~ .,
splitMethod = "none", cens.model = "marginal")
plot(pred_error, xlim = c(0, 30), )
title("RSF Model Prediction Error Curve")
}
model <- rsf_model(hr)
predict(model, train_test_generate(hr)$test)
train_test_generate <- function (df, proportion = 0.7) {
size <- round(proportion * nrow(df))
idx <- sample(seq_len(nrow(df)), size = size, replace = FALSE)
return(list("train" = df[idx, ], "test" = df[-idx, ]))
}
predict(model, train_test_generate(hr)$test)
x <- predict(model, train_test_generate(hr)$test)
x_test <- train_test_generate(hr)$test
x <- predict(model, x_test)
x
x$predicted
x$chf
x$chf[0]
x$chf[[0]]
x$chf[,0]
x$chf[, 1]
roc(x$chf[, 1], x_test["Attrition"])
roc(x_test["Attrition"], x$chf[,1])
roc_(x_test["Attrition"], x$chf[,1])
x_test["Attrition"]
roc(x_test["Attrition"], x$chf[,1], plot = TRUE)
roc(as.vector(x_test["Attrition"]), x$chf[,1], plot = TRUE)
as.vector(x_test["Attrition"])
levels(as.factor(x_test["Attrition"]))
levels(as.factor(as.vector(x_test["Attrition"])))
as.factor(x_test["Attrition"]))
as.factor(x_test["Attrition"])
y <- x_test["Attrition"]
View(x_test)
View(y)
format(y)
?str(y)
str(y)
roc(x_test["Attrition"], x$chf[,1], plot = TRUE, levels=c(TRUE,FALSE))
str(x$chf[,1])
roc(as.vector(x_test["Attrition"]), x$chf[,1], plot = TRUE, levels=c(TRUE,FALSE))
as.vector(x_test["Attrition"])
str(as.vector(x_test["Attrition"]))
roc(as.logical.factor(x_test["Attrition"]), x$chf[,1], plot = TRUE)
roc(as.logical(x_test["Attrition"]), x$chf[,1], plot = TRUE)
str(x_test["Attrition"])
roc(lapply(x_test["Attrition"], as.logical), x$chf[,1], plot = TRUE)
roc(lapply(x_test["Attrition"], as.logical,factor), x$chf[,1], plot = TRUE)
str(lapply(x_test["Attrition"], as.logical,factor))
str(lapply(x_test["Attrition"], as.logical,factor)[1])
str(lapply(x_test["Attrition"], as.logical,factor)[0])
str(c(x_test["Attrition"]))
str(c(1,2,2))
roc(x_test$Attrition, x$chf[,1], plot = TRUE)
install.packages("caret")
library(caret)
cv_control <- trainControl(method = "cv", number = 10)
# Save the model
saveRDS(model_v2, "model.rds")
# Import & clean
rm(list = ls())
setwd("Downloads/shuuheialb.github.io/projects/employee-attrition")
hr <- read.csv("hr_data.csv")
# Filter columns
cols <- names(hr)
cols <- cols[cols != "EmployeeNumber"]
single_value_cols <- names(hr)[sapply(hr, function (col) length(unique(col)) == 1)]
cols <- cols[!(cols %in% single_value_cols)]
# Convert column data types
cat_cols <- c("BusinessTravel", "Department", "EducationField", "JobRole")
hr[cat_cols] <- lapply(hr[cat_cols], factor)
bool_cols <- c("Attrition", "Gender", "MaritalStatus", "OverTime")
hr[bool_cols] <- lapply(hr[bool_cols], function (col) ifelse(col == "Yes", TRUE, FALSE))
library(randomForestSRC)
library(survival)
library(pec, warn.conflicts = FALSE)
library(pROC)
library(ggplot2)
library(reshape2)
library(viridis)
# Base model
rsf_model <- function (df) {
model <- rfsrc(Surv(YearsAtCompany, Attrition) ~ ., data = df, ntree = 100)
return(model)
}
# Accuracy plot
plot_pec <- function(df, model) {
pred_error <- pec(model, data = df, formula = Surv(YearsAtCompany, Attrition) ~ .,
splitMethod = "none", cens.model = "marginal")
plot(pred_error, xlim = c(0, 20), )
title("RSF Model Prediction Error Curve")
}
# Feature selection functions
# 1. Importance function
rsf_importance <- function (df, model, sort = TRUE) {
importance <- predict(model, df, importance = TRUE)$importance
if (sort) {
importance <- importance[order(importance, decreasing = TRUE)]
}
return(importance)
}
# 2. Averaged importance rank
train_test_generate <- function (df, proportion = 0.7) {
size <- round(proportion * nrow(df))
idx <- sample(seq_len(nrow(df)), size = size, replace = FALSE)
return(list("train" = df[idx, ], "test" = df[-idx, ]))
}
k_fold_cross_val <- function (df, k = 10) {
for (fold in 1:k) {
separate <- train_test_generate(df)
train <- separate$train
test <- separate$test
model <- rsf_model(train)
if (!(exists("importance_tot"))) {
importance_tot <- rsf_importance(test, model, FALSE)
} else {
importance_tot <- importance_tot + rsf_importance(test, model, FALSE)
}
}
print("Average variable importance:")
print(importance_tot[order(importance_tot, decreasing = TRUE)]/length(importance_tot))
}
# 3. Correlation
plot_correlation <- function (df, model) {
cor_matrix <- cor(df[, !(names(df) %in% cat_cols)])
melted_cor_matrix <- melt(cor_matrix)
melted_cor_matrix$value <- abs(melted_cor_matrix$value)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() + scale_fill_viridis() +
xlab("") + ylab("") + ggtitle("Correlation Map") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5))
}
# First iteration
#hr1 <- hr[cols]
#model_v1 <- rsf_model(hr1)
#plot_pec(hr1, model_v1)
#k_fold_cross_val(hr)
#focus_cols <- c("Attrition", "YearsAtCompany", "OverTime", "JobLevel", "Age",
#                "NumCompaniesWorked", "MonthlyIncome", "StockOptionLevel")
#plot_correlation(hr[focus_cols], model_v1)
# Second iteration
selected_features <- hr[, c("Attrition", "YearsAtCompany", "Age", "MonthlyIncome", "OverTime", "NumCompaniesWorked",
"StockOptionLevel", "JobRole")]
k_fold_cross_val(selected_features)
model_v2 <- rsf_model(selected_features)
plot_pec(selected_features, model_v2)
# Prediction
rsf_attrition_probability <- function (df, model) {
return(predict(model, df)$chf)
}
rsf_high_risk_indiv_idx <- function (df, model, limit = 100) {
df$HazardScore <- predict(model, df)$predicted
return(order(df$HazardScore, decreasing = TRUE)[1:limit])
}
for (i in 1:5) {
hr[, paste0("AttritionProb_Year", i)] <- rsf_attrition_probability(hr, model_v2)[, i+1]
}
head(hr)
hriidx <- rsf_high_risk_indiv_idx(hr, model_v2)
hr_emp_ids
for (i in 1:5) {
hr[, paste0("AttritionProb_Year", i)] <- rsf_attrition_probability(hr, model_v2)[, i+1]
}
head(hr)
hriidx <- rsf_high_risk_indiv_idx(hr, model_v2)
hridv <- hr[hriidx, c("AttritionProb_Year1", "AttritionProb_Year2", "AttritionProb_Year3",
"AttritionProb_Year4", "AttritionProb_Year5")]
plot(1, type = "n", xlim = c(1, ncol(hridv)), ylim = range(hridv), xlab = "Year", ylab = "Probability")
title("100 High-Risk Employee Turnoever Trajectory")
for (i in 1:nrow(hridv)) {
lines(1:ncol(hridv), hridv[i, ], col = i, type = "l")
}
legend("topright", legend = hr_emp_ids[hriidx, ], col = 1:nrow(hridv), lty = 1, title = "Employee Number")
legend("topright", legend = hr_emp_ids[hriidx, ], col = 1:nrow(hridv), lty = 1, title = "Employee Number")
legend("topright", legend = hr[hriidx, "EmployeeNum"], col = 1:nrow(hridv), lty = 1, title = "Employee Number")
legend("topright", legend = hr[hriidx, "EmployeeNumber"], col = 1:nrow(hridv), lty = 1, title = "Employee Number")
saveRDS(model_v2, "model.rds")
shiny::runApp()
cols <- cols[cols != "EmployeeNumber"]
single_value_cols <- names(hr)[sapply(hr, function (col) length(unique(col)) == 1)]
cols <- cols[!(cols %in% single_value_cols)]
# Convert column data types
cat_cols <- c("BusinessTravel", "Department", "EducationField", "JobRole")
hr[cat_cols] <- lapply(hr[cat_cols], factor)
bool_cols <- c("Attrition", "Gender", "MaritalStatus", "OverTime")
hr[bool_cols] <- lapply(hr[bool_cols], function (col) ifelse(col == "Yes", TRUE, FALSE))
library(randomForestSRC)
library(survival)
library(pec, warn.conflicts = FALSE)
library(pROC)
library(ggplot2)
library(reshape2)
library(viridis)
# Base model
rsf_model <- function (df) {
model <- rfsrc(Surv(YearsAtCompany, Attrition) ~ ., data = df, ntree = 100)
return(model)
}
# Accuracy plot
plot_pec <- function(df, model) {
pred_error <- pec(model, data = df, formula = Surv(YearsAtCompany, Attrition) ~ .,
splitMethod = "none", cens.model = "marginal")
plot(pred_error, xlim = c(0, 20), )
title("RSF Model Prediction Error Curve")
}
# Feature selection functions
# 1. Importance function
rsf_importance <- function (df, model, sort = TRUE) {
importance <- predict(model, df, importance = TRUE)$importance
if (sort) {
importance <- importance[order(importance, decreasing = TRUE)]
}
return(importance)
}
# 2. Averaged importance rank
train_test_generate <- function (df, proportion = 0.7) {
size <- round(proportion * nrow(df))
idx <- sample(seq_len(nrow(df)), size = size, replace = FALSE)
return(list("train" = df[idx, ], "test" = df[-idx, ]))
}
k_fold_cross_val <- function (df, k = 10) {
for (fold in 1:k) {
separate <- train_test_generate(df)
train <- separate$train
test <- separate$test
model <- rsf_model(train)
if (!(exists("importance_tot"))) {
importance_tot <- rsf_importance(test, model, FALSE)
} else {
importance_tot <- importance_tot + rsf_importance(test, model, FALSE)
}
}
print("Average variable importance:")
print(importance_tot[order(importance_tot, decreasing = TRUE)]/length(importance_tot))
}
# 3. Correlation
plot_correlation <- function (df, model) {
cor_matrix <- cor(df[, !(names(df) %in% cat_cols)])
melted_cor_matrix <- melt(cor_matrix)
melted_cor_matrix$value <- abs(melted_cor_matrix$value)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() + scale_fill_viridis() +
xlab("") + ylab("") + ggtitle("Correlation Map") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5))
}
# First iteration
#hr1 <- hr[cols]
#model_v1 <- rsf_model(hr1)
#plot_pec(hr1, model_v1)
#k_fold_cross_val(hr)
#focus_cols <- c("Attrition", "YearsAtCompany", "OverTime", "JobLevel", "Age",
#                "NumCompaniesWorked", "MonthlyIncome", "StockOptionLevel")
#plot_correlation(hr[focus_cols], model_v1)
# Second iteration
hr["NumCompaniesWorkedPerYear"] <- hr["NumCompaniesWorked"]/(hr["TotalWorkingYears"] + 0.5)
selected_features <- hr[, c("Attrition", "YearsAtCompany", "Age", "MonthlyIncome", "OverTime", "NumCompaniesWorkedPerYear",
"StockOptionLevel", "JobRole")]
k_fold_cross_val(selected_features)
cols <- cols[cols != "EmployeeNumber"]
single_value_cols <- names(hr)[sapply(hr, function (col) length(unique(col)) == 1)]
cols <- cols[!(cols %in% single_value_cols)]
# Convert column data types
cat_cols <- c("BusinessTravel", "Department", "EducationField", "JobRole")
hr[cat_cols] <- lapply(hr[cat_cols], factor)
bool_cols <- c("Attrition", "Gender", "MaritalStatus", "OverTime")
hr[bool_cols] <- lapply(hr[bool_cols], function (col) ifelse(col == "Yes", TRUE, FALSE))
library(randomForestSRC)
library(survival)
library(pec, warn.conflicts = FALSE)
library(pROC)
library(ggplot2)
library(reshape2)
library(viridis)
# Base model
rsf_model <- function (df) {
model <- rfsrc(Surv(YearsAtCompany, Attrition) ~ ., data = df, ntree = 100)
return(model)
}
# Accuracy plot
plot_pec <- function(df, model) {
pred_error <- pec(model, data = df, formula = Surv(YearsAtCompany, Attrition) ~ .,
splitMethod = "none", cens.model = "marginal")
plot(pred_error, xlim = c(0, 20), )
title("RSF Model Prediction Error Curve")
}
# Feature selection functions
# 1. Importance function
rsf_importance <- function (df, model, sort = TRUE) {
importance <- predict(model, df, importance = TRUE)$importance
if (sort) {
importance <- importance[order(importance, decreasing = TRUE)]
}
return(importance)
}
# 2. Averaged importance rank
train_test_generate <- function (df, proportion = 0.7) {
size <- round(proportion * nrow(df))
idx <- sample(seq_len(nrow(df)), size = size, replace = FALSE)
return(list("train" = df[idx, ], "test" = df[-idx, ]))
}
k_fold_cross_val <- function (df, k = 10) {
for (fold in 1:k) {
separate <- train_test_generate(df)
train <- separate$train
test <- separate$test
model <- rsf_model(train)
if (!(exists("importance_tot"))) {
importance_tot <- rsf_importance(test, model, FALSE)
} else {
importance_tot <- importance_tot + rsf_importance(test, model, FALSE)
}
}
print("Average variable importance:")
print(importance_tot[order(importance_tot, decreasing = TRUE)]/length(importance_tot))
}
# 3. Correlation
plot_correlation <- function (df, model) {
cor_matrix <- cor(df[, !(names(df) %in% cat_cols)])
melted_cor_matrix <- melt(cor_matrix)
melted_cor_matrix$value <- abs(melted_cor_matrix$value)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() + scale_fill_viridis() +
xlab("") + ylab("") + ggtitle("Correlation Map") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5))
}
# First iteration
#hr1 <- hr[cols]
#model_v1 <- rsf_model(hr1)
#plot_pec(hr1, model_v1)
#k_fold_cross_val(hr)
#focus_cols <- c("Attrition", "YearsAtCompany", "OverTime", "JobLevel", "Age",
#                "NumCompaniesWorked", "MonthlyIncome", "StockOptionLevel")
#plot_correlation(hr[focus_cols], model_v1)
# Second iteration
hr["NumCompaniesWorkedPerYear"] <- hr["NumCompaniesWorked"]/(hr["TotalWorkingYears"] + 0.5)
selected_features <- hr[, c("Attrition", "YearsAtCompany", "Age", "MonthlyIncome", "OverTime", "NumCompaniesWorkedPerYear",
"StockOptionLevel", "JobRole")]
k_fold_cross_val(selected_features)
model_v2 <- rsf_model(selected_features)
plot_pec(selected_features, model_v2)
hr["NumCompaniesWorkedPerYear"] <- hr["NumCompaniesWorked"]/(hr["TotalWorkingYears"] + 0.5)
cols <- c("Attrition", "YearsAtCompany", "MonthlyIncome", "OverTime", "Age",
"JobRole", "NumCompaniesWorkedPerYear", "StockOptionLevel")
hr2 <- hr[cols]
k_fold_cross_val(hr2)
model_v2 <- rsf_model(hr2)
plot_pec(hr2, model_v2)
hr["NumCompaniesWorkedPerYear"] <- hr["NumCompaniesWorked"]/(hr["TotalWorkingYears"] + 0.5)
cols <- c("Attrition", "YearsAtCompany", "MonthlyIncome", "OverTime", "Age",
"JobRole", "NumCompaniesWorkedPerYear", "StockOptionLevel")
hr2 <- hr[cols]
hr1 <- hr[cols]
model_v1 <- rsf_model(hr1)
rm(list = ls())
hr <- read.csv("hr_data.csv")
cols <- cols[cols != "EmployeeNumber"]
cols <- names(hr)
cols <- cols[cols != "EmployeeNumber"]
single_value_cols <- names(hr)[sapply(hr, function (col) length(unique(col)) == 1)]
cols <- cols[!(cols %in% single_value_cols)]
# Convert column data types
cat_cols <- c("BusinessTravel", "Department", "EducationField", "JobRole")
hr[cat_cols] <- lapply(hr[cat_cols], factor)
bool_cols <- c("Attrition", "Gender", "MaritalStatus", "OverTime")
hr[bool_cols] <- lapply(hr[bool_cols], function (col) ifelse(col == "Yes", TRUE, FALSE))
library(randomForestSRC)
library(survival)
library(pec, warn.conflicts = FALSE)
library(pROC)
library(ggplot2)
library(reshape2)
library(viridis)
# Base model
rsf_model <- function (df) {
model <- rfsrc(Surv(YearsAtCompany, Attrition) ~ ., data = df, ntree = 100)
return(model)
}
# Accuracy plot
plot_pec <- function(df, model) {
pred_error <- pec(model, data = df, formula = Surv(YearsAtCompany, Attrition) ~ .,
splitMethod = "none", cens.model = "marginal")
plot(pred_error, xlim = c(0, 20), )
title("RSF Model Prediction Error Curve")
}
# Feature selection functions
# 1. Importance function
rsf_importance <- function (df, model, sort = TRUE) {
importance <- predict(model, df, importance = TRUE)$importance
if (sort) {
importance <- importance[order(importance, decreasing = TRUE)]
}
return(importance)
}
# 2. Averaged importance rank
train_test_generate <- function (df, proportion = 0.7) {
size <- round(proportion * nrow(df))
idx <- sample(seq_len(nrow(df)), size = size, replace = FALSE)
return(list("train" = df[idx, ], "test" = df[-idx, ]))
}
k_fold_cross_val <- function (df, k = 10) {
for (fold in 1:k) {
separate <- train_test_generate(df)
train <- separate$train
test <- separate$test
model <- rsf_model(train)
if (!(exists("importance_tot"))) {
importance_tot <- rsf_importance(test, model, FALSE)
} else {
importance_tot <- importance_tot + rsf_importance(test, model, FALSE)
}
}
print("Average variable importance:")
print(importance_tot[order(importance_tot, decreasing = TRUE)]/length(importance_tot))
}
# 3. Correlation
plot_correlation <- function (df, model) {
cor_matrix <- cor(df[, !(names(df) %in% cat_cols)])
melted_cor_matrix <- melt(cor_matrix)
melted_cor_matrix$value <- abs(melted_cor_matrix$value)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() + scale_fill_viridis() +
xlab("") + ylab("") + ggtitle("Correlation Map") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5))
}
# First iteration
hr1 <- hr[cols]
model_v1 <- rsf_model(hr1)
#plot_pec(hr1, model_v1)
k_fold_cross_val(hr)
hr["NumCompaniesWorkedPerYear"] <- hr["NumCompaniesWorked"]/(hr["TotalWorkingYears"] + 0.5)
cols <- c("Attrition", "YearsAtCompany", "MonthlyIncome", "OverTime", "Age",
"JobRole", "NumCompaniesWorkedPerYear", "StockOptionLevel")
hr2 <- hr[cols]
k_fold_cross_val(hr2)
model_v2 <- rsf_model(hr2)
plot_pec(hr2, model_v2)
# Prediction
rsf_attrition_probability <- function (df, model) {
return(predict(model, df)$chf)
}
rsf_high_risk_indiv_idx <- function (df, model, limit = 100) {
df$HazardScore <- predict(model, df)$predicted
return(order(df$HazardScore, decreasing = TRUE)[1:limit])
}
for (i in 1:5) {
hr[, paste0("AttritionProb_Year", i)] <- rsf_attrition_probability(hr, model_v2)[, i+1]
}
head(hr)
hriidx <- rsf_high_risk_indiv_idx(hr, model_v2)
hridv <- hr[hriidx, c("AttritionProb_Year1", "AttritionProb_Year2", "AttritionProb_Year3",
"AttritionProb_Year4", "AttritionProb_Year5")]
plot(1, type = "n", xlim = c(1, ncol(hridv)), ylim = range(hridv), xlab = "Year", ylab = "Probability")
title("100 High-Risk Employee Turnoever Trajectory")
for (i in 1:nrow(hridv)) {
lines(1:ncol(hridv), hridv[i, ], col = i, type = "l")
}
legend("topright", legend = hr[hriidx, "EmployeeNumber"], col = 1:nrow(hridv), lty = 1, title = "Employee Number")
# Save the model
saveRDS(model_v2, "model.rds")
which(hr$EmployeeNumber == 1)
which(hr$EmployeeNumber == 2)
which(hr$EmployeeNumber == 7)
which(hr$EmployeeNumber == 3)
runApp()
runApp()
runApp()
hr[1, ]
hr[1, ]["EmployeeNumber"]
hr[1, ][c("AttritionProb_Year1")]
paste("x:", hr[1, ][c("AttritionProb_Year1", "")])
paste("x:", hr[1, ][c("AttritionProb_Year1")])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
model = model_v2
save(list = c(hr, model), file = "Rdata.Rdata")
model <- model_v2
save(list = c(hr, model), file = "Rdata.Rdata")
saveRDS(model_v2, "model.rds")
saveRDS(hr, "transformed_data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
q
runApp()
runApp()
runApp()
